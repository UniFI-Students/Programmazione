// Consegna 1: obbligatoria
int[][] ruota(int[][] S, int[] r) {
	int n = S.length;
	int m = S[0].length;
	
	for (int j=0; j<m; ++j)
		RotateColumnInMatrixDownwards(S, j, r[j]%n);
		
	return S;
}

// Consegna 2: facoltativa
boolean controllaVincita(int[][] S) {
	int n = S.length;
	int m = S[0].length;

	for (int j=0; j<m; ++j)
		if (S[n/2][j]!=1) return false;
		
	return true;
}

// Consegna 3: facoltativa
boolean partitaCompleta(int[][] S, int[] r, int k) {
	return partitaCompletaRicursiva(S, r, k);
}


void RotateColumnInMatrixDownwards(int[][] a, int column, int rotates)
{
	int n = a.length;
	for (int r=0; r<rotates; ++r)
	{
		int t = a[0][column];
		for (int currI=0; currI<n; ++currI)
		{
			int nextI = DoCircularMove(currI, 0, n - 1, 1);	
			int nextT = a[nextI][column];
			a[nextI][column] = t;
			t = nextT;
		}	
	}
}

int DoCircularMove(int x, int left, int right, int moveBy)
{
	x=x+(moveBy%(right + 1));
	if (x < left) x += right + 1;
	x%=right + 1;
	return x;
}

boolean partitaCompletaRicursiva(int[][] S, int[] r, int k)
{
	int n = S.length;
	int m = S[0].length;
	
	if (k==0) return controllaVincita(S);;
	int[][] newS = new int[n][m];
			for (int i=0; i<n; ++i)
				for (int j=0; j<m; ++j) newS[i][j] = S[i][j];
	ruota(newS, r);
	return controllaVincita(S) || partitaCompletaRicursiva(newS, r, k-1);
}